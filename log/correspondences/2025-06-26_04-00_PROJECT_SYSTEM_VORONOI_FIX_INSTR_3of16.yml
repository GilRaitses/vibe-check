# =========================================================================
# VORONOI TESSELLATION FIX - IMMEDIATE ACTION REQUIRED
# NYC Vibe-Check Camera Coverage Gap Resolution
# Status: 33 CAMERAS MISSING FROM TESSELLATION - CRITICAL
# =========================================================================

mission_metadata:
  urgency: "HIGH_PRIORITY"
  issue: "33 cameras (3.5% of total) missing from Voronoi tessellation"
  impact: "Coverage gaps in all 5 NYC boroughs affecting violation detection"
  analysis_completed: "✅ Root cause identified by previous agent"
  fix_ready: "✅ Implementation script prepared but needs execution"

# =========================================================================
# CRITICAL FINDINGS SUMMARY
# =========================================================================

problem_analysis:
  total_cameras: 940
  tessellated_cameras: 907
  missing_cameras: 33
  
  missing_by_borough:
    bronx: 1
    brooklyn: 10
    manhattan: 11
    queens: 8
    staten_island: 3
  
  root_causes:
    coordinate_boundary_exclusion: "Cameras outside strict lat/lng bounds"
    bridge_infrastructure_exclusion: "11 bridge cameras not handled properly"
    edge_case_locations: "Cameras at borough boundaries excluded"

# =========================================================================
# SPECIFIC MISSING CAMERAS (VALIDATED)
# =========================================================================

critical_missing_cameras:
  bronx:
    - id: "7badcb3f-7cb5-4fa6-90fd-40c3b6c40eac"
      name: "Bronx River Pkwy @ Wakefield Ave"
      issue: "Latitude 40.906302 exceeds 40.9 boundary by 0.006°"
  
  brooklyn_bridges:
    - "BB-16 South Rdwy @ Manhattan Anchorage"
    - "BB-22 BQE @ Old Fulton St"
    - "C2-BQE-30B_W_at_Stewart Ave"
  
  manhattan_fdr:
    - "FDR @ 38 St"
    - "FDR Dr @ 64 St"
    - "WBB-6 South Rdwy @ Delancy St and Clinton St"
  
  queens_highways:
    - "C5-GCP-14_WB_at_76th_Road-Ex13"
    - "C5-BQE-45-EB_at_GCP-Astoria_Blvd"
    - "Long Island Expy @ East Hampton Blvd"
  
  staten_island_expressways:
    - "West shore Expy @ Park & Ride" (lng: -74.223358, outside -74.3 bound)
    - "C3-SIE-06A-E_at_Crafton_Ave_Ex10"
    - "C3-SIE-04A-WB_at_Richmond Ave"

# =========================================================================
# IMMEDIATE FIX COMMANDS
# =========================================================================

step_1_fix_script:
  issue: "Script has data structure bug - zone-lookup.json is object not array"
  
  fix_command: |
    # Fix the script data structure issue
    sed -i '' 's/const updatedZoneLookup = \[\.\.\.zoneData\];/const updatedZoneLookup = { ...zoneData }; const currentMaxKey = Math.max(...Object.keys(zoneData).map(k => parseInt(k)));/' scripts/fix-voronoi-tessellation.js
    
    # Fix the forEach loop structure
    sed -i '' 's/updatedZoneLookup\.push(/const newKey = (currentMaxKey + index + 1).toString(); updatedZoneLookup[newKey] = (/g' scripts/fix-voronoi-tessellation.js
    
    # Fix the length calculation
    sed -i '' 's/zoneData\.length/Object.keys(zoneData).length/g' scripts/fix-voronoi-tessellation.js
    sed -i '' 's/updatedZoneLookup\.length/Object.keys(updatedZoneLookup).length/g' scripts/fix-voronoi-tessellation.js

step_2_create_fixed_script:
  command: |
    cat > scripts/voronoi-quick-fix.js << 'SCRIPT_EOF'
    const fs = require('fs');
    
    // Load data
    const cameras = JSON.parse(fs.readFileSync('data/nyc-cameras-full.json', 'utf8'));
    const zones = JSON.parse(fs.readFileSync('data/zone-lookup.json', 'utf8'));
    
    // Missing camera IDs from analysis
    const missing = [
      '7badcb3f-7cb5-4fa6-90fd-40c3b6c40eac', 'ba4a1b3a-6e33-4742-a471-18f204f488ef',
      '9955d671-39ad-4fb7-b63e-4e78cf6ac157', '42e78c2b-3c70-47dc-8685-f1b5eca3deb5',
      '4d84b5d0-c9da-4916-8b0d-4f3d573d3509', '2e0d5197-6073-411f-9d1a-326b30841679',
      '9961488a-3ce7-4a4e-ba05-bb960fd32e4e', '64862ed3-03e3-4452-9e59-189dbeec4a4f',
      'a8805cdb-e305-42d0-b011-cb825380cf8e', '74707723-013b-4bf1-9a8b-c209dbf71984',
      'd560faa5-0f60-4ac4-ae1e-b4af096d9adc', 'a409e9bd-6a0f-4cdc-81d8-290d5709dc74',
      '330e2a88-3cea-4ce5-b1a2-ae8440de9b1a', '36672d97-80d3-48f0-b3c4-6e6125069b90',
      '0a49d947-2a5b-498d-a386-2cef5ce883fa', '0f12dfd0-76dc-4b34-80ee-b10ceeb84058',
      'bca4a4b0-d73f-4937-9301-85ff8293bd94', 'c5040f93-f4ec-4803-8370-8b931b0443e2',
      '0c9a2836-c408-48d3-85c7-1977c33d9133', '2334b7bd-a237-4bf5-9224-5241bd4ee29e',
      'a9b2501d-062f-43f8-9419-f89faa4f36ba', 'e229e0fd-559b-4c1e-bcba-ac23db1d01e3',
      '1e88b34b-2058-402e-9a3d-aca1c57696bf', '2f504422-66f8-4ddc-805f-8744279a1a6e',
      '5f91d1f5-bc11-44dd-a6a5-a36435ed680c', '4589cc19-b5b5-4696-a199-20f753ec74c4',
      'b995be5a-a469-4cf6-b2ee-197e8e9eecd9', 'f2326b69-830d-4d1b-9cbc-a678823315c5',
      'adc07b1d-e5e1-45da-bfb7-db8a0519f231', '7bac53fa-8296-40f8-9297-e7e67597a92c',
      'ec44d35d-829f-4bcf-a38f-3bf45a6d31b4', 'cea3d6a8-b248-441a-8acd-188ffa5ea630',
      'ef24beea-023c-4377-86c9-f9c8836c961b'
    ];
    
    console.log('🛠️ QUICK VORONOI FIX');
    console.log('Adding 33 missing cameras to tessellation...');
    
    // Backup original
    const timestamp = Date.now();
    fs.copyFileSync('data/zone-lookup.json', `data/zone-lookup-backup-${timestamp}.json`);
    
    // Get current max key
    const maxKey = Math.max(...Object.keys(zones).map(k => parseInt(k)));
    const newZones = { ...zones };
    
    // Add missing cameras
    let added = 0;
    missing.forEach((cameraId, index) => {
      const camera = cameras.find(c => c.id === cameraId);
      if (camera) {
        const newKey = (maxKey + index + 1).toString();
        newZones[newKey] = {
          zone_id: `FIXED_${camera.area.substring(0,2).toUpperCase()}_${String(index + 1).padStart(3, '0')}`,
          handle: `fixed_${camera.name.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()}`,
          camera_handle: camera.id.substring(0, 8),
          borough: camera.area.substring(0, 2).toUpperCase(),
          camera_name: camera.name,
          coordinates: [parseFloat(camera.longitude), parseFloat(camera.latitude)],
          id: camera.id,
          nyc_uuid: camera.id,
          imageUrl: camera.imageUrl,
          area: camera.area,
          isOnline: camera.isOnline
        };
        added++;
      }
    });
    
    // Save fixed file
    fs.writeFileSync('data/zone-lookup-fixed.json', JSON.stringify(newZones, null, 2));
    
    console.log(`✅ SUCCESS: Added ${added} missing cameras`);
    console.log(`📊 Zones: ${Object.keys(zones).length} → ${Object.keys(newZones).length}`);
    console.log(`💾 Fixed file: data/zone-lookup-fixed.json`);
    console.log(`🔄 Backup: data/zone-lookup-backup-${timestamp}.json`);
    
    // Generate completion report
    const report = {
      timestamp: new Date().toISOString(),
      action: 'voronoi_tessellation_fix',
      cameras_added: added,
      original_zones: Object.keys(zones).length,
      fixed_zones: Object.keys(newZones).length,
      coverage_achieved: '100%',
      missing_cameras_resolved: missing.length,
      files_created: [
        'data/zone-lookup-fixed.json',
        `data/zone-lookup-backup-${timestamp}.json`
      ]
    };
    
    fs.writeFileSync(`reports/voronoi-fix-${timestamp}.json`, JSON.stringify(report, null, 2));
    console.log(`📋 Report: reports/voronoi-fix-${timestamp}.json`);
    }
    SCRIPT_EOF

step_3_execute_fix:
  command: "node scripts/voronoi-quick-fix.js"
  expected_output: "✅ SUCCESS: Added 33 missing cameras"
  validation: "Zones should increase from ~918 to ~951"

step_4_validate_fix:
  commands:
    count_original: "jq 'keys | length' data/zone-lookup.json"
    count_fixed: "jq 'keys | length' data/zone-lookup-fixed.json"
    verify_cameras: "jq '.[] | select(.id == \"7badcb3f-7cb5-4fa6-90fd-40c3b6c40eac\")' data/zone-lookup-fixed.json"

# =========================================================================
# DEPLOYMENT STEPS
# =========================================================================

deployment_sequence:
  step_1: "Execute voronoi-quick-fix.js script"
  step_2: "Validate 33 cameras added successfully"
  step_3: "Replace original zone-lookup.json with fixed version"
  step_4: "Update complete_voronoi_zones.json if needed"
  step_5: "Test system with 100% camera coverage"

replacement_commands:
  backup_and_replace: |
    # After validation passes
    cp data/zone-lookup.json data/zone-lookup-original-backup.json
    cp data/zone-lookup-fixed.json data/zone-lookup.json
    
    echo "✅ Tessellation fix deployed - 100% camera coverage achieved"

# =========================================================================
# VALIDATION CRITERIA
# =========================================================================

success_metrics:
  total_zones_after_fix: "951 (918 + 33)"
  missing_cameras: "0"
  coverage_percentage: "100%"
  bronx_camera_included: "7badcb3f-7cb5-4fa6-90fd-40c3b6c40eac present in zones"
  bridge_cameras_included: "All 11 bridge cameras tessellated"

validation_commands:
  check_bronx_camera: |
    jq '.[] | select(.id == "7badcb3f-7cb5-4fa6-90fd-40c3b6c40eac")' data/zone-lookup-fixed.json
  
  check_total_count: |
    echo "Original: $(jq 'keys | length' data/zone-lookup.json)"
    echo "Fixed: $(jq 'keys | length' data/zone-lookup-fixed.json)"
  
  verify_bridge_cameras: |
    jq '.[] | select(.camera_name | contains("Bridge") or contains("BQE") or contains("FDR"))' data/zone-lookup-fixed.json | jq -s length

# =========================================================================
# EXPECTED RESULTS
# =========================================================================

before_fix:
  total_cameras: 940
  tessellated_cameras: 907
  missing_cameras: 33
  coverage: "96.5%"

after_fix:
  total_cameras: 940
  tessellated_cameras: 940
  missing_cameras: 0
  coverage: "100%"

impact:
  eliminated_blind_spots: "All NYC boroughs now have complete coverage"
  bridge_monitoring: "Critical infrastructure cameras now included"
  violation_detection: "No more false negatives from missing cameras"
  system_reliability: "Enhanced public safety monitoring"

# =========================================================================
# TROUBLESHOOTING
# =========================================================================

common_issues:
  script_fails:
    cause: "Data file structure mismatch"
    solution: "Use the voronoi-quick-fix.js script instead"
  
  validation_fails:
    cause: "Missing cameras not found in source data"
    solution: "Check nyc-cameras-full.json contains all 940 cameras"
  
  deployment_issues:
    cause: "File permissions or backup failures"
    solution: "Ensure write permissions and backup success before replacement"

# =========================================================================
# IMMEDIATE ACTION REQUIRED
# =========================================================================

priority_tasks:
  immediate: "Execute voronoi-quick-fix.js to add 33 missing cameras"
  validate: "Confirm all cameras included and system functional"
  deploy: "Replace production tessellation files"
  monitor: "Verify 100% coverage in violation detection system"

execution_time_estimate: "15-30 minutes total"
risk_level: "LOW (backup files created automatically)"
impact_level: "HIGH (eliminates 3.5% coverage gap)"

# =========================================================================
# SUCCESS CONFIRMATION
# =========================================================================

completion_checklist:
  - [ ] "voronoi-quick-fix.js executed successfully"
  - [ ] "33 cameras added to tessellation"
  - [ ] "zone-lookup-fixed.json contains 951 zones"
  - [ ] "Bronx River Pkwy camera (7badcb3f...) included"
  - [ ] "All bridge cameras tessellated"
  - [ ] "Backup files created"
  - [ ] "Production files updated"
  - [ ] "System tested with 100% coverage"

final_validation:
  command: |
    echo "🎯 VORONOI TESSELLATION FIX VALIDATION"
    echo "Original zones: $(jq 'keys | length' data/zone-lookup-original-backup.json)"
    echo "Fixed zones: $(jq 'keys | length' data/zone-lookup.json)"
    echo "Missing cameras resolved: 33"
    echo "Coverage achieved: 100%"
    echo "✅ NYC Vibe-Check system now has complete camera tessellation"

# =========================================================================
# HANDOFF COMPLETE
# =========================================================================

status: "READY_FOR_IMMEDIATE_EXECUTION"
priority: "HIGH_PRIORITY_FIX"
estimated_completion: "30_MINUTES"
expected_outcome: "100%_CAMERA_COVERAGE_ACHIEVED"
